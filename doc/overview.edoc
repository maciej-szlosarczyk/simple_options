@doc
A library that facilitates defining options. It allows you to validate the
options user passes into your library or inside your application, to ensure
it is properly configured before started.

This is still an experiment. It might be not tremendously useful to anyone.

```
Definitions = [
    {default_timeout, [
        required,
        {documentation,
         <<"Default timeout in miliseconds. Must be greater than 300.">>},
        {validation, fun
            (X) when is_integer(X) ->
                case X > 300 of
                    false ->
                        must_be_greater_than_300; %% Errors with this atom
                    true ->
                        true %%
                end;
            (_X) ->
                false %% Errors with is_invalid message
        end}
    ]},
    {name, [
        {default, my_app},
        {documentation, <<"Name of your application">>},
        {validation, fun (X) -> is_atom(X) end},
        {error_message, must_be_an_atom} %% Always errors with must_be_an_atom
    ]}
].
'''

You can merge user provided options with your defintions:

```
UserOpts = [{default_timeout, 400}],
[{name,my_app},{default_timeout,400}] =
    simple_options:merge(UserOpts, Definitions).
'''

When options provided by user are invalid or incomplete, you get an exception
error for the first defintion that does not pass validation:

```
UserOpts = [{default_timeout, 1}, {name, 1}],
simple_options:merge(UserOpts, Definitions).
** exception error: {error,{default_timeout,must_be_greater_than_300}}

UserOpts = [{default_timeout, 400}, {name, 1}],
simple_options:merge(UserOpts, Definitions).
** exception error: {error,{name,must_be_an_atom}}
'''
@end
